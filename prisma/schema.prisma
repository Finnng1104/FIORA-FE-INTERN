generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String         @unique
  password             String?
  image                String?
  role                 UserRole       @default(User)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  bizLicense           String?
  status               UserStatus     @default(Pending)
  accounts             Account[]
  invoicesCreated      Invoice[]      @relation("InvoiceCreator")
  invoicesUpdated      Invoice[]      @relation("InvoiceUpdater")
  invoices             Invoice[]
  ordersCreated        Order[]        @relation("OrderCreator")
  ordersUpdated        Order[]        @relation("OrderUpdater")
  orders               Order[]
  orderInvoicesCreated OrderInvoice[] @relation("OrderInvoiceCreator")
  orderInvoicesUpdated OrderInvoice[] @relation("OrderInvoiceUpdater")
  orderInvoices        OrderInvoice[]
  sessions             Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Media {
  id            String    @id @default(uuid()) @db.Uuid
  media_type    MediaType
  media_url     String?
  embed_code    String?
  description   String?
  uploaded_by   String?
  uploaded_date DateTime  @default(now()) @db.Timestamptz(0)
  section_id    String?   @db.Uuid
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(0)
  createdBy     String?   @db.Uuid
  updatedBy     String?   @db.Uuid
  redirect_url  String?
  section       Section?  @relation(fields: [section_id], references: [id])
}

model Section {
  id           String      @id @default(uuid()) @db.Uuid
  section_type SectionType
  name         String
  order        Int
  createdAt    DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime    @updatedAt @db.Timestamptz(0)
  createdBy    String?     @db.Uuid
  updatedBy    String?     @db.Uuid
  medias       Media[]
}

model Order {
  id            String         @id @default(uuid())
  userId        String
  orderNo       String         @unique
  datetime      DateTime?      @db.Timestamptz(0)
  totalAmt      Decimal        @db.Decimal(9, 2)
  cusName       String         @db.VarChar(255)
  address       String?        @db.VarChar(255)
  email         String?        @db.VarChar(50)
  phone         String?        @db.VarChar(20)
  status        OrderStatus
  createdAt     DateTime       @default(now()) @db.Timestamptz(0)
  createdBy     String?
  updatedAt     DateTime       @updatedAt @db.Timestamptz(0)
  updatedBy     String?
  creator       User?          @relation("OrderCreator", fields: [createdBy], references: [id])
  updater       User?          @relation("OrderUpdater", fields: [updatedBy], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  orderInvoices OrderInvoice[]

  @@index([userId])
  @@index([createdBy])
  @@index([updatedBy])
}

model Invoice {
  id            String         @id @default(uuid())
  userId        String
  reqNo         String         @unique @db.VarChar(10)
  reqDatetime   DateTime       @db.Timestamptz(0)
  orderNo       String
  cusName       String         @db.VarChar(255)
  taxNo         String?        @db.VarChar(20)
  taxAddress    String?        @db.VarChar(255)
  email         String?        @db.VarChar(50)
  phone         String?        @db.VarChar(20)
  status        InvoiceStatus
  invNo         String?        @unique @db.VarChar(50)
  invDate       DateTime?      @db.Date
  repNo         String?        @db.VarChar(50)
  createdAt     DateTime       @default(now()) @db.Timestamptz(0)
  createdBy     String?
  updatedAt     DateTime       @updatedAt @db.Timestamptz(0)
  updatedBy     String?
  creator       User?          @relation("InvoiceCreator", fields: [createdBy], references: [id])
  updater       User?          @relation("InvoiceUpdater", fields: [updatedBy], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  orderInvoices OrderInvoice[]

  @@index([userId])
  @@index([createdBy])
  @@index([updatedBy])
}

model OrderInvoice {
  id        String   @id @default(uuid())
  userId    String
  orderNo   String
  invNo     String
  createdAt DateTime @default(now()) @db.Timestamptz(0)
  createdBy String?
  updatedAt DateTime @updatedAt @db.Timestamptz(0)
  updatedBy String?
  creator   User?    @relation("OrderInvoiceCreator", fields: [createdBy], references: [id])
  invoice   Invoice  @relation(fields: [invNo], references: [reqNo])
  order     Order    @relation(fields: [orderNo], references: [orderNo])
  updater   User?    @relation("OrderInvoiceUpdater", fields: [updatedBy], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([orderNo, invNo])
  @@index([orderNo])
  @@index([invNo])
  @@index([createdBy])
  @@index([updatedBy])
}

enum MediaType {
  IMAGE
  VIDEO
  EMBEDDED
}

enum SectionType {
  BANNER
  VISION_MISSION
  KPS
  PARTNER_LOGO
  FOOTER
  HEADER
  REVIEW
  SYSTEM
}

enum UserRole {
  Admin
  User
  CS
}

enum Currency {
  VND
  USD
}

enum OrderStatus {
  Unpaid
  Paid
  Cancelled
  Refund
}

enum InvoiceStatus {
  Requested
  Accepted
  Issuing
  Issued
  Replaced
  Cancelled
}

enum UserStatus {
  Rejected
  Verified
  Pending
}
