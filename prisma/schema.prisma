generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets   = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String?
  image     String?
  role      UserRole  @default(User)
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Media {
  id            String    @id @default(uuid()) @db.Uuid
  media_type    MediaType
  media_url     String?
  embed_code    String?
  description   String?
  uploaded_by   String?
  uploaded_date DateTime  @default(now()) @db.Timestamptz(0)
  section_id    String?   @db.Uuid
  createdAt     DateTime  @default(now()) @db.Timestamptz(0)
  updatedAt     DateTime  @updatedAt @db.Timestamptz(0)
  createdBy     String?   @db.Uuid
  updatedBy     String?   @db.Uuid
  redirect_url  String?
  section       Section?  @relation(fields: [section_id], references: [id])
}

model Section {
  id           String      @id @default(uuid()) @db.Uuid
  section_type SectionType
  name         String
  order        Int
  createdAt    DateTime    @default(now()) @db.Timestamptz(0)
  updatedAt    DateTime    @updatedAt @db.Timestamptz(0)
  createdBy    String?     @db.Uuid
  updatedBy    String?     @db.Uuid
  medias       Media[]
}

enum MediaType {
  IMAGE
  VIDEO
  EMBEDDED
}

enum SectionType {
  BANNER
  VISION_MISSION
  KPS
  PARTNER_LOGO
  FOOTER
  HEADER
  REVIEW
  SYSTEM
}

enum UserRole {
  Admin
  User
  CS
}

enum Currency {
  VND
  USD
}
